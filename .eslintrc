{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true,
    "jest": true,
  },
  "extends": [
    "plugin:@next/next/recommended",
    "plugin:@typescript-eslint/recommended",
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended", // React hooks rules
    "plugin:prettier/recommended", // Prettier recommended rules
    "prettier",
  ],
  "ignorePatterns": ["node_modules/*", ".next/*", ".out/*", "!.prettierrc"], // We don't want to lint generated files nor node_modules, but we want to lint .prettierrc (ignored by default by eslint)
  "overrides": [
    {
      // enable the rule specifically for TypeScript files
      "files": ["*.tsx", "*.ts"],
      "rules": {
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-explicit-any": "warn", // TODO: Set as error after fix all the any across the app
        "import/order": [
          "error",
          {
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true,
            },
            "newlines-between": "always",
          },
        ],
        "import/newline-after-import": ["error", { "count": 1 }],
      },
    },
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
  },
  "plugins": ["react", "@typescript-eslint", "prettier", "import"],
  "rules": {
    "prettier/prettier": ["error", {}, { "usePrettierrc": true }], // Includes .prettierrc.js rules
    "react/prop-types": "off",
    "@typescript-eslint/no-unused-vars": ["error"],
    // No need to import React when using Next.js
    "react/react-in-jsx-scope": "off",
    "@typescript-eslint/ban-ts-comment": 1,
    "no-extra-parens": "off", // Prettier will take care of this
  },
  "settings": {
    "react": {
      "version": "detect", // React version. "detect" automatically picks the version you have installed.
      // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
      // It will default to "latest" and warn if missing, and to "detect" in the future
    },
  },
  "globals": {
    "JSX": true,
  },
}
